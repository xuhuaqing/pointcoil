<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pointcoil.mapper.ThermodynamicMapper">
    <cache type="com.pointcoil.conf.MybatisRedisCache">
        <property name="eviction" value="LRU" />
        <property name="flushInterval" value="6000000" />
        <property name="size" value="1024" />
        <property name="readOnly" value="false" />
    </cache>
    <!--time is not null and starClass is not null-->
   <!-- <select id="selectThermodynamic" resultType="com.pointcoil.dto.map.HeatDTO$HeatDataDTO">
            select COUNT(1) as count,shopName from tbl_thermodynamic_data where
            city LIKE CONCAT(#{heatDTO.city,jdbcType=VARCHAR},'%')
            and firstClassClassification = #{map1.firstClassClassification}
            and twoLevelClassification = #{map1.twoLevelClassification}
            <if test="map1.threeLevelClassification != null and map1.threeLevelClassification !=''">
                and threeLevelClassification = #{map1.threeLevelClassification}
            </if>
            <if test="map1.firstClassClassification == '丽人|购物'.toString() and map1.twoLevelClassification == '化妆品'.toString()">
                and shopName not REGEXP '安利|玫琳凯|完美'
            </if>
            <if test="heatDTO.heatType == 3">
                and shopName not REGEXP '宿|舍'
            </if>
            GROUP BY shopName
            <if test="heatDTO.heatType != 3">
                HAVING count > #{map1.minCount};
            </if>
    </select>-->

    <update id="upd">
        update tbl_core
        <set>
            count = count+1
        </set>
        where id = 1
    </update>
    <select id="selectThermodynamicData" resultType="com.pointcoil.dto.map.HeatDTO$HeatMapDataDTO">
        select id,wgs_lng as lng, wgs_lat as lat from tbl_thermodynamic_data
        where  city LIKE CONCAT(#{heatDTO.city,jdbcType=VARCHAR},'%') and
        shopName in
        (
        <foreach collection="lists" item="list" index="index" separator=",">
            <foreach collection="list" item="list" separator="," index="index">
                #{list.shopName,jdbcType=VARCHAR}
            </foreach>
        </foreach>
        )
    </select>
    <select id="selectAreYouHeatMap" resultMap="selectAreYou">
            select lon as lng,lat ,monthSaleCount/10 as count from tbl_areyouhungry where city LIKE CONCAT(#{heatDTO.city,jdbcType=VARCHAR},'%')
    </select>
    <resultMap id="selectAreYou" type="com.pointcoil.dto.map.HeatDTO$HeatMapDataDTO">
        <result column="lng" property="lng"/>
        <result column="lat" property="lat"/>
        <result column="count" property="count"/>
    </resultMap>
    <delete id="deleteThermodynamic">
        delete from tbl_thermodynamic_data where id in
        <foreach collection="map" item="map" index="index" separator="," open="(" close=")">
            #{map.id}
        </foreach>
    </delete>

    <select id="selectAreYouByDel" resultType="java.util.Map">
          SELECT `id`
        , 6371 * acos(cos(radians(#{heatMapDeleteDTO.lat})) * cos(radians(`lat`)) * cos(radians(`lon`) - radians(#{heatMapDeleteDTO.lng})) + sin(radians(#{heatMapDeleteDTO.lat})) * sin(radians(`lat`))) AS `distance`
        FROM `tbl_areyouhungry`
        HAVING `distance` &lt; #{heatMapDeleteDTO.radius}
        ORDER BY `distance`
    </select>
    <delete id="deleteAreYou">
                delete from tbl_areyouhungry where id in
                <foreach collection="map" item="map" index="index" separator="," open="(" close=")">
                    #{map.id}
                </foreach>
    </delete>
    <select id="selectThermodynamicByDel" resultType="java.util.Map">
        SELECT `id`
        , 6371 * acos(cos(radians(#{heatMapDeleteDTO.lat})) * cos(radians(`wgs_lat`)) * cos(radians(`wgs_lng`) - radians(#{heatMapDeleteDTO.lng})) + sin(radians(#{heatMapDeleteDTO.lat})) * sin(radians(`wgs_lat`))) AS `distance`
        FROM `tbl_thermodynamic_data`
        HAVING `distance` &lt; #{heatMapDeleteDTO.radius}
        ORDER BY `distance`
    </select>
    <insert id="addThermodynamic">
        insert  tbl_thermodynamic_add
        <set>
            id = replace(uuid(),'-',''),
            lat = #{addHeatMapDataDTO.lat},
            lng = #{addHeatMapDataDTO.lng},
            type  = #{addHeatMapDataDTO.type},
            count = #{addHeatMapDataDTO.count},
            city = #{addHeatMapDataDTO.city}
        </set>
    </insert>
    <select id="selectNewAreYouByDel" resultType="java.util.Map">
         SELECT `id`
        , 6371 * acos(cos(radians(#{heatMapDeleteDTO.lat})) * cos(radians(`lat`)) * cos(radians(`lng`) - radians(#{heatMapDeleteDTO.lng})) + sin(radians(#{heatMapDeleteDTO.lat})) * sin(radians(`lat`))) AS `distance`
        FROM `tbl_thermodynamic_add`
        where type = 4
        HAVING `distance` &lt; #{heatMapDeleteDTO.radius}
        ORDER BY `distance`
    </select>
    <delete id="deleteNewAreYou">
        delete from tbl_thermodynamic_add where id in
        <foreach collection="map" item="map" index="index" separator="," open="(" close=")">
            #{map.id}
        </foreach>
    </delete>
    <select id="selectNewAreYouByDel1" resultType="java.util.Map">
     SELECT `id`
        , 6371 * acos(cos(radians(#{heatMapDeleteDTO.lat})) * cos(radians(`lat`)) * cos(radians(`lng`) - radians(#{heatMapDeleteDTO.lng})) + sin(radians(#{heatMapDeleteDTO.lat})) * sin(radians(`lat`))) AS `distance`
        FROM `tbl_thermodynamic_add`
        where type != 4
        HAVING `distance` &lt; #{heatMapDeleteDTO.radius}
        ORDER BY `distance`
    </select>
    <select id="selectNewAreYou" resultType="com.pointcoil.dto.map.HeatDTO$HeatMapDataDTO">
         select id,lng,lat , count from tbl_thermodynamic_add  where type = #{heatDTO.heatType} and city LIKE CONCAT(#{heatDTO.city,jdbcType=VARCHAR},'%')
    </select>

</mapper>